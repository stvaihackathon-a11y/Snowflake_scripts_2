name: Deploy Liquibase to Snowflake

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Target environment (dev|qa|prod)"
        required: true
        default: "dev"
        type: choice
        options: [dev, qa, prod]
      branch:
        description: "Git branch to deploy"
        required: true
        default: "main"
      changelog:
        description: "Path to Liquibase changelog file"
        required: true
        default: "liquibase_scripts/changelog-root.xml"
      context_tags:
        description: "Liquibase context(s) (optional)"
        required: false
        default: ""
  push:
    branches: ["main"]
    paths:
      - "liquibase_scripts/**"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Map environment-specific variables from GitHub Environments or Secrets
      LB_CHANGELOG: ${{ github.event.inputs.changelog || 'liquibase_scripts/changelog-root.xml' }}
      LB_CONTEXTS: ${{ github.event.inputs.context_tags }}
      TARGET_ENV: ${{ github.event.inputs.env || 'dev' }}
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      # Optional per-env overrides (set in GitHub envs: dev/qa/prod)
      SNOWFLAKE_DATABASE_${{ github.event.inputs.env }}: ${{ vars.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_SCHEMA_${{ github.event.inputs.env }}: ${{ vars.SNOWFLAKE_SCHEMA }}
      SNOWFLAKE_WAREHOUSE_${{ github.event.inputs.env }}: ${{ vars.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_ROLE_${{ github.event.inputs.env }}: ${{ vars.SNOWFLAKE_ROLE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'main' }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Install Liquibase CLI
        run: |
          LIQUIBASE_VERSION=4.30.0
          curl -L -o liquibase.tar.gz https://github.com/liquibase/liquibase/releases/download/v${LIQUIBASE_VERSION}/liquibase-${LIQUIBASE_VERSION}.tar.gz
          sudo mkdir -p /opt/liquibase && sudo tar -xzf liquibase.tar.gz -C /opt/liquibase
          echo "/opt/liquibase" | sudo tee -a /etc/paths
          sudo ln -s /opt/liquibase/liquibase /usr/local/bin/liquibase

      - name: Fetch Snowflake JDBC driver
        run: |
          mkdir -p /opt/liquibase/lib
          curl -L -o /opt/liquibase/lib/snowflake-jdbc.jar https://repo1.maven.org/maven2/net/snowflake/snowflake-jdbc/3.16.0/snowflake-jdbc-3.16.0.jar

      - name: Render liquibase.properties
        run: |
          # Per-env overrides if you store them as Environment variables
          DB="${SNOWFLAKE_DATABASE_${TARGET_ENV}:-$SNOWFLAKE_DATABASE}"
          SCH="${SNOWFLAKE_SCHEMA_${TARGET_ENV}:-$SNOWFLAKE_SCHEMA}"
          WH="${SNOWFLAKE_WAREHOUSE_${TARGET_ENV}:-$SNOWFLAKE_WAREHOUSE}"
          RL="${SNOWFLAKE_ROLE_${TARGET_ENV}:-$SNOWFLAKE_ROLE}"

          cat > liquibase.properties << 'EOF'
          # Auto-generated by GitHub Actions
          classpath=/opt/liquibase/lib/snowflake-jdbc.jar
          driver=net.snowflake.client.jdbc.SnowflakeDriver
          url=jdbc:snowflake://${SNOWFLAKE_ACCOUNT}.snowflakecomputing.com/?warehouse=${WH}&db=${DB}&schema=${SCH}&role=${RL}
          username=${SNOWFLAKE_USER}
          password=${SNOWFLAKE_PASSWORD}
          EOF
          echo "== liquibase.properties =="
          sed 's/password=.*/password=*******/' liquibase.properties

      - name: Liquibase Validate
        id: validate
        run: |
          set -e
          liquibase --changelog-file="${LB_CHANGELOG}" validate | tee validate.log

      - name: Liquibase Update SQL (dry-run)
        run: |
          set -e
          liquibase --changelog-file="${LB_CHANGELOG}" \
                    ${LB_CONTEXTS:+--contexts="${LB_CONTEXTS}"} \
                    updateSQL | tee updatesql.log

      - name: Upload dry-run SQL
        uses: actions/upload-artifact@v4
        with:
          name: liquibase-update-sql
          path: updatesql.log

      - name: Liquibase Update (apply to Snowflake)
        id: update
        run: |
          set -e
          liquibase --changelog-file="${LB_CHANGELOG}" \
                    ${LB_CONTEXTS:+--contexts="${LB_CONTEXTS}"} \
                    update | tee update.log

      - name: Upload deploy logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: liquibase-logs
          path: |
            validate.log
            update.log
